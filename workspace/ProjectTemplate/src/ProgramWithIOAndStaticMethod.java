import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Zakaria Hassan
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
//opening tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        int locaTitle = getChildElement(channel, "title");
        XMLTree title = channel.child(locaTitle);
        String labelTitle = "";

        if (title.numberOfChildren() > 0) {
            labelTitle = labelTitle + title.child(0).label();
        } else {
            labelTitle = labelTitle + "Empty title";
        }

        out.println(labelTitle);
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        int locLink = getChildElement(channel, "link");
        XMLTree link = channel.child(locLink);
        String linkLabel = link.child(0).label();

        out.println("<h1><a href=" + "\"" + linkLabel + "\">" + labelTitle
                + "</a></h1>");
        int locDisc = getChildElement(channel, "description");
        XMLTree description = channel.child(locDisc);
        String labelDesc = "";

        if (description.numberOfChildren() > 0) {
            labelDesc = labelDesc + description.child(0).label();
        } else {
            labelDesc = labelDesc + "No description";
        }

        out.println("<p>" + labelDesc + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
    * getChildElement =
    * [the index of the first child of type tag of the {@code XMLTree} or
    * -1 if not found]
    * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int locAt = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {

                locAt = i;

                i = xml.numberOfChildren();
            }
        }

        return locAt;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
    * out.content = #out.content *
    * [an HTML table row with publication date, source, and title of news item]
    * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""

                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<tr>");
        int locpub = getChildElement(item, "pubDate");
        String labelpub = "";

        if (locpub != -1) {
            labelpub += item.child(locpub).child(0).label();
        } else {
            labelpub += "No date available";
        }
        out.println("<td>" + labelpub + "</td>");
        int locSource = getChildElement(item, "source");
        String urlSource = "";
        String nameSource = "";

        if (locSource != -1 && item.child(locSource).numberOfChildren() > 0) {
            urlSource = item.child(locSource).attributeValue("url");
            nameSource = item.child(locSource).child(0).label();
            out.println("<td><a href=\"" + urlSource + "\">" + nameSource
                    + "</a></td>");
        } else if (locSource != -1) {
            urlSource = item.child(locSource).attributeValue("url");
            nameSource = "No source available";
            out.println("<td><a href=\"" + urlSource + "\">" + nameSource
                    + "</a></td>");
        } else {
            nameSource = "No source available";
            out.println("<td>" + nameSource + "</td>");
        }
        int locTitle = getChildElement(item, "title");
        int locDesc = getChildElement(item, "description");
        int locLink = getChildElement(item, "link");

        if (locTitle != -1 && item.child(locTitle).numberOfChildren() > 0) {
              String titleLabel = item.child(locTitle).child(0).label();)
            if (locLink != -1) {
                String labelLink = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + labelLink + "\">" + titleLabel
                        + "</a></td>");
            } else {
                out.println("<td>" + titleLabel + "</td>");
            }
        } else if (locDesc != -1
                && item.child(locDesc).numberOfChildren() > 0) {
            String labelDescr = item.child(locDesc).child(0).label();

            if (locLink != -1) {
                String linkLabel = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + linkLabel + "\">" + labelDescr
                        + "</a></td>");
            } else {
                out.println("<td>" + labelDescr + "</td>");
            }
        } else {

            if (locLink != -1) {
                String linkLabel = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + linkLabel + "\">"
                        + "No title available" + "</a></td>");
            } else {
                out.println("<td>" + "No title available" + "</td>");
            }
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the url for a valid RSS 2.0 feed: ");
        String urlInp = in.nextLine();
        XMLTree xml = new XMLTree1(urlInp);

        while (xml.label() != "rss" || !(xml.hasAttribute("version"))
                || !(xml.attributeValue("version").equals("2.0"))) {
            out.print("Enter the url for a valid RSS 2.0 feed: ");
            urlInp = in.nextLine();
            xml = new XMLTree1(urlInp);
        }

        out.print("Enter the name for an output file including .html: ");
        String fname = in.nextLine();
        SimpleWriter htmlFile = new SimpleWriter1L(fname);
        XMLTree channel = xml.child(0);

        outputHeader(channel, htmlFile);

        int i = 0;
        while (i < channel.numberOfChildren()) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), htmlFile);
            }
            i++;
        }

        outputFooter(htmlFile);
        in.close();
        out.close();
        htmlFile.close();
    }

}
