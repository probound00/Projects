
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert multiple XML RSS (version 2.0) feeds from a given URL into
 * the corresponding HTML output file.
 *
 * @author Zakaria Hassan
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //opening tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        //extract and print channel title
        int locaTitle = getChildElement(channel, "title");
        XMLTree title = channel.child(locaTitle);
        String labelTitle = "";
        //checking if title is empty
        if (title.numberOfChildren() > 0) {
            labelTitle = labelTitle + title.child(0).label();
        } else {
            labelTitle = labelTitle + "Empty title";
        }
        out.println(labelTitle);
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

        //extract and print the channel link as a hyperlink
        int locLink = getChildElement(channel, "link");
        XMLTree link = channel.child(locLink);
        String linkLabel = link.child(0).label();

        //printing hyperlink
        out.println("<h1><a href=" + "\"" + linkLabel + "\">" + labelTitle
                + "</a></h1>");

        int locDisc = getChildElement(channel, "description");
        XMLTree description = channel.child(locDisc);
        String labelDesc = "";

        if (description.numberOfChildren() > 0) {
            labelDesc = labelDesc + description.child(0).label();
        } else {
            labelDesc = labelDesc + "No description";
        }

        out.println("<p>" + labelDesc + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //output the html closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int loc = -1;
        //loop that runs through all children to find tag
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {

                loc = i;
            }
        }
        return loc;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<tr>");
        int locPub = getChildElement(item, "pubDate");
        String labelPub = "";

        if (locPub != -1) {
            labelPub = labelPub + item.child(locPub).child(0).label();
        } else {
            labelPub = labelPub + "No date available";
        }
        out.println("<td>" + labelPub + "</td>");

        int locSource = getChildElement(item, "source");
        String urlSource = "";
        String nameSource = "";

        //check if source exists
        if (locSource != -1 && item.child(locSource).numberOfChildren() > 0) {
            urlSource = item.child(locSource).attributeValue("url");
            nameSource = item.child(locSource).child(0).label();
            out.println("<td><a href=\"" + urlSource + "\">" + nameSource
                    + "</a></td>");
        } else if (locSource != -1) {
            urlSource = item.child(locSource).attributeValue("url");
            nameSource = "No source available";
            out.println("<td><a href=\"" + urlSource + "\">" + nameSource
                    + "</a></td>");
        } else {
            nameSource = "No source available";
            out.println("<td>" + nameSource + "</td>");
        }
        int locTitle = getChildElement(item, "title");
        int locDesc = getChildElement(item, "description");
        int locLink = getChildElement(item, "link");
        //if title exits and it has a child
        if (locTitle != -1 && item.child(locTitle).numberOfChildren() > 0) {
            String titleLabel = item.child(locTitle).child(0).label();
            //if the link exists
            if (locLink != -1) {
                String linkLabel = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + linkLabel + "\">" + titleLabel
                        + "</a></td>");
            } else {
                out.println("<td>" + titleLabel + "</td>");
            }
        } else if (locDesc != -1
                && item.child(locDesc).numberOfChildren() > 0) {
            String labelDesc = item.child(locDesc).child(0).label();
            //checks if link exists, prints hyperlink
            if (locLink != -1) {
                String linkLabel = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + linkLabel + "\">" + labelDesc
                        + "</a></td>");
            } else {
                out.println("<td>" + labelDesc + "</td>");
            }
        } else {
            if (locLink != -1) {
                String linkLabel = item.child(locLink).child(0).label();
                out.println("<td><a href=\"" + linkLabel + "\">"
                        + "No title available" + "</a></td>");
            } else {
                out.println("<td>" + "No title available" + "</td>");
            }
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);
        outputHeader(channel, out);

        int i = 0;
        while (i < channel.numberOfChildren()) {
            XMLTree child = channel.child(i);

            if (child.label().equals("item")) {
                processItem(child, out);
            }

            i++;
        }

        outputFooter(out);
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        //prompt for input
        out.print("Enter the name of an XML file with URLs for RSS feeds: ");
        String urlInp = in.nextLine();
        XMLTree xml = new XMLTree1(urlInp);
        //keep prompting for new file until condition is met
        while (xml.label() != "feeds" || !(xml.hasAttribute("title"))) {
            out.print("Please enter a valid file: ");
            urlInp = in.nextLine();
            xml = new XMLTree1(urlInp);
        }
        //prompt user for output file
        out.print("Enter the name for an output file followed by .html: ");
        String fname = in.nextLine();
        SimpleWriter mainFile = new SimpleWriter1L(fname);
        //opening tags
        mainFile.println("<html>");
        mainFile.println("<head>");
        String titleName = xml.attributeValue("title");
        mainFile.println("<title>" + titleName + "</title>");
        mainFile.println("</head>");
        mainFile.println("<body>");
        mainFile.println("<h2>" + titleName + "</h2>");
        mainFile.println("<ul>");

        //loop that runs through all feed tags
        int i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals("feed")) {
                String url = xml.child(i).attributeValue("url");
                String name = xml.child(i).attributeValue("name");
                String file = xml.child(i).attributeValue("file");

                SimpleWriter singleFile = new SimpleWriter1L(file);
                processFeed(url, file, singleFile);

                mainFile.println(
                        "<li><a href=\"" + file + "\">" + name + "</a></li>");
                singleFile.close();
            }
            i++;
        }
        //output closing tags
        mainFile.println("</ul>");
        mainFile.println("</body>");
        mainFile.println("</html>");
        in.close();
        out.close();
        mainFile.close();
    }

}